## DevOps challenge

First of all thanks for being part of this process :)

## Entering the Matrix.

Hello NEO.

We have a Rails application that says Hello world! But is becoming really popular.
Our old infrastructure run in EC2 machines but the maintenance of this is really hard for us.
We hear that we can use containers in order to build and ship our application in a fast and safe way.

You should choose between two pills:

[The red pill]: You can take the control of the Matrix and run the containers under self managed AWS EC2/GCP VM instances.

[The blue pill]: You take this and you wake up using AWS Fargate/GCP Cloud Run.

Please explain the reason for your decision.

-   I chose the blue pill (chosen cloud is GCP):
    This is because GCP Cloud Run is a managed container service, so all the underlying architecture
    management like provisioning, scaling and monioring is already handled for you. Hosting the service
    through GCP VM instances will require a lot of operational overhead.
    This is also more cost effective as it is serverless with a pay-as-you-go pricing model based on usage
    requested, compared to maintaining a fleet of VMs which can sometimes require paying for idle resources.
    Managed container services like Cloud Run also come with built in security measures (like binary authorization)
    to make sure the application adheres to security compliance.


After you take a choice, please complete the following tasks.

Create the infrastructure and the pipeline needed in order to serve our application from AWS/GCP containers.

-   The infrastucture was created in my personal GCP project. I leveraged Terraform for majority of it
    so that it is easily destroyable and re-producable. This is present in the terraform/main.tf file. Please observe
    that file for the details related to the infrastructure. I have added comments explaining the resources I have 
    created with specific options enabled/disabled.

Host our database in AWS RDS/ GCP SQL and import the current data (/db/database.sql).

-   The database is hosted on a Cloud SQL postgres instance. A GCS bucket contains the database.sql file so
    that it could be imported directly into the hello_world database.

Create a script that easy deploy new code to the stack.

-   I have create a cloudbuild.yaml file that performs steps to build the container image using the Dockerfile
    and pushes it to GCR for storage. It then deploys this built image to a Cloud Run service. There is also a 
    git trigger setup that performs the task of continuous deployment of the service.

Set autoscaling policies in order to have a minimum of 1 task, a desired of 1, and a maximum of 10 based on the CPU usage.

-   In the terraform it can be observed that the cloud run service has options set, specifying the min and max instance
    counts which automatically scale up or down based on CPU being used by the number of requests incoming. By default,
    the scaling happens when CPU utilization hits 60%.

Add some simple observability solution where we can monitor the app: APM or logs or both if you have the time.

-   Since I am using a managed service like Cloud Run, it already provides a built-in dashboard to monitor APM 
    metrics like CPU, memory, latency etc. These performance metrics were further used to create alerts when any
    value surpasses the set threshold (like high instance counts, and latency)
    I have also created an uptime check pointing to the load balancer's IP so that I can monitor if the service is 
    up and running, and things like latency from incoming requests from different parts of the world.
    In the cloudbuild.yaml I set logs behaviour to REGIONAL_USER_OWNED_BUCKET, which sends cloud build logs to 
    a logging bucket in the same region, allowing for later analysis of these logs.
    In the Dockerfile, I enabled the flag for RAILS_LOG_TO_STDOUT, so any application service related logs can be viewed
    from stackdriver directly.
    Loadbalancer logs were also enabled, along with VPC flow logs, so we can observe any suspicious requests hitting the LB
    from the internet.


## Application details:

* Ruby version: 2.3.x
* Rails version: 4.2
* Postgres version :11.6

Database configuration: config/database.yml
Update your host.
username: admin
password: admin
db name: hello_world

## Test your results

Is everithing is ok the route /hello_world will return the following respose:
{"id":1,"text":"Hello World!"}
